# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import forecast_pb2 as forecast__pb2


class ForecastAPIStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RetrainModel = channel.unary_stream(
        '/ForecastService.ForecastAPI/RetrainModel',
        request_serializer=forecast__pb2.TrainRequest.SerializeToString,
        response_deserializer=forecast__pb2.TrainResponse.FromString,
        )
    self.Forecast = channel.unary_unary(
        '/ForecastService.ForecastAPI/Forecast',
        request_serializer=forecast__pb2.ForecastRequest.SerializeToString,
        response_deserializer=forecast__pb2.ForecastResponse.FromString,
        )


class ForecastAPIServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def RetrainModel(self, request, context):
    """Service to Retrain Model
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Forecast(self, request, context):
    """Service to Make Forecast
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ForecastAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RetrainModel': grpc.unary_stream_rpc_method_handler(
          servicer.RetrainModel,
          request_deserializer=forecast__pb2.TrainRequest.FromString,
          response_serializer=forecast__pb2.TrainResponse.SerializeToString,
      ),
      'Forecast': grpc.unary_unary_rpc_method_handler(
          servicer.Forecast,
          request_deserializer=forecast__pb2.ForecastRequest.FromString,
          response_serializer=forecast__pb2.ForecastResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ForecastService.ForecastAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
